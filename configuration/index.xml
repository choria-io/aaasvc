<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration on Choria AAA Service</title><link>https://choria-io.github.io/aaasvc/configuration/index.html</link><description>Recent content in Configuration on Choria AAA Service</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://choria-io.github.io/aaasvc/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>CA Based</title><link>https://choria-io.github.io/aaasvc/configuration/ca/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/aaasvc/configuration/ca/index.html</guid><description>Overview This deployment method is suitable to the typical Puppet user who wish to bring a little centralization to their system. It uses certificates from the Puppet CA and you will need to make a number of extra ones.
This mode does not completely remove the need for per-user certificates, but, it will help a lot with multi node scenarios and allow you a more easy to manage method of managing RBAC.</description></item><item><title>Org Issuer Based</title><link>https://choria-io.github.io/aaasvc/configuration/org-issuer/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/aaasvc/configuration/org-issuer/index.html</guid><description>Overview This deployment method is suitable to users who do not have access to a Certificate Authority. You might be a Puppet user but do not want to use the Puppet CA for multiple purposes or, you deployed using a non-Puppet method and so do not have easy access to a natively supported CA.
This mode completely removes the need for per-user x509 certificates, the entire system is controlled by a series of JWT tokens and ed25519 keys.</description></item><item><title>Userlist Authenticator</title><link>https://choria-io.github.io/aaasvc/configuration/userlist/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/aaasvc/configuration/userlist/index.html</guid><description>Authentication is the act of validating a person is who he claims to be, this is done using a username, token, 2FA or other similar means.
While authentication is provided by this tool, it&amp;rsquo;s optional you might choose to create JWT tokens using another method of your choosing, the login feature will only be enabled if any authenticator is configured.
There is only one authenticator at the moment more might be added again in the future, for now you would set the authenticator key to userlist if you wish to enable it in a specific location.</description></item><item><title>OPA Authorizer</title><link>https://choria-io.github.io/aaasvc/configuration/opa/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/aaasvc/configuration/opa/index.html</guid><description>The Open Policy Agent based policies allow for very flexible policy to be embedded into the JWT tokens, it allows for policies we have never supported in the past:
Ensuring filters are used to avoid huge blast radius requests by accident Ensuring specific fact, class or identity filters are used Ensuring a specific collective is used Contents of the JWT claim Checks based on the site the aaasvc is deployed in Checks on every input being sent to the action This section covers the opa authorizer in detail and will include more detailed examples in time.</description></item></channel></rss>